@page "/TodoList"

<h1>Todo List</h1>
<ContextMenuTrigger MenuId="todoItemsMenu">
    <ul id="list">
        @foreach (var item in TodoItems)
        {
            <li id="@($"listitem-{TodoItems.IndexOf(item)}")"><input type="checkbox" bind="item.IsChecked" readonly /> @item.Text</li>
        }
    </ul>
</ContextMenuTrigger>

<ContextMenu Id="todoItemsMenu">
    <Item id="menuitem-copy" Click="@CopyClick"><i class="fas fa-file blue-icon"></i> Copy</Item>
    <Item id="menuitem-check" Click="@CheckClick" EnabledHandler="@CheckEnabledHandler"><i class="fas fa-file blue-icon"></i> Check</Item>
    <Item id="menuitem-delete" Click="@DeleteClick" VisibleHandler="@DeleteVisibleHandler"><i class="fas fa-trash-alt red-icon"></i> Delete</Item>
    <Item id="menuitem-invisible" Visible="false">I am invisible</Item>
</ContextMenu>

@functions{

    void CopyClick(MenuItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = RegisteredFunction.Invoke<int>("TestApp.TodoList.GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            TodoItems.Add(new TodoItem
            {
                Text = currentTodoItem.Text + " Copy",
                IsChecked = currentTodoItem.IsChecked,
                CanBeDeleted = currentTodoItem.CanBeDeleted
            });
            StateHasChanged();
        }
    }

    bool CheckEnabledHandler(MenuItemHandlerArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = RegisteredFunction.Invoke<int>("TestApp.TodoList.GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            return !currentTodoItem.IsChecked;
        }

        return false;
    }

    bool DeleteVisibleHandler(MenuItemHandlerArgs e)
    {

        var itemIndex = RegisteredFunction.Invoke<int>("TestApp.TodoList.GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            return currentTodoItem.CanBeDeleted;
        }

        return false;
    }


    void CheckClick(MenuItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = RegisteredFunction.Invoke<int>("TestApp.TodoList.GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            currentTodoItem.IsChecked = true;
            StateHasChanged();
        }
    }

    void DeleteClick(MenuItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = RegisteredFunction.Invoke<int>("TestApp.TodoList.GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            TodoItems.Remove(currentTodoItem);
            StateHasChanged();
        }
    }

    List<TodoItem> TodoItems = new List<TodoItem>
    {
        new TodoItem
        {
            Text = "Item 1",
            IsChecked = true
        },
        new TodoItem
        {
            Text="Item 2"
        },
        new TodoItem
        {
            Text="Item 3 (Cannot be deleted)",
            CanBeDeleted = false
        }
    };

    class TodoItem
    {
        public string Text { get; set; }
        public bool IsChecked { get; set; }
        public bool CanBeDeleted { get; set; } = true;
    }

}