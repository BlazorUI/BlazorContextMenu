@inject BlazorContextMenuHandler blazorContextMenuHandler
@inject IJSRuntime jsRuntime

<div onclick="@(MouseButtonTrigger == MouseButtonTrigger.Left || MouseButtonTrigger == MouseButtonTrigger.Both ? $"blazorContextMenu.OnContextMenu(event, '{MenuId.Replace("'","\\'")}'); " : "")"
     oncontextmenu="@(MouseButtonTrigger == MouseButtonTrigger.Right || MouseButtonTrigger == MouseButtonTrigger.Both ? $"blazorContextMenu.OnContextMenu(event, '{MenuId.Replace("'","\\'")}');": "")"
     class="@CssClass">
    @ChildContent
</div>

@functions{

    /// <summary>
    /// The id of the <see cref="ContextMenu" /> to open. This parameter is required
    /// </summary>
    [Parameter]
    public string MenuId { get; protected set; }

    /// <summary>
    /// Additional css class for the trigger's div wrapper element
    /// </summary>
    [Parameter]
    public string CssClass { get; protected set; }

    /// <summary>
    [Parameter]
    public MouseButtonTrigger MouseButtonTrigger { get; protected set; }

    [Parameter]
    protected RenderFragment ChildContent { get; set; }

    protected override void OnInit()
    {
        if (string.IsNullOrEmpty(MenuId))
        {
            throw new ArgumentNullException(nameof(MenuId));
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (!blazorContextMenuHandler.ReferencePassedToJs)
        {
            await jsRuntime.InvokeAsync<object>("blazorContextMenu.SetMenuHandlerReference", new DotNetObjectRef(blazorContextMenuHandler));
            blazorContextMenuHandler.ReferencePassedToJs = true;
        }
    }
}