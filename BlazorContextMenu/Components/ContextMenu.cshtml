@using System.ComponentModel
@inherits MenuTreeComponent
@inject BlazorContextMenuSettings settings
@inject BlazorContextMenuHandler contextMenuHandler

<div class="@($"{BaseClass} {ClassCalc}")" id="@Id" style="@($"left:{X}px;top:{Y}px;{StyleDisplayCalc}")">
    @if (IsShowing)
    {
        <ul class="@ListClassCalc">
            <CascadingValue Value="(MenuTreeComponent)this" Name="ParentComponent">
                @ChildContent
            </CascadingValue>
        </ul>
    }
</div>

@functions{

#pragma warning disable BL9993, CS4014 // Component parameter is marked public

    protected virtual string BaseClass => "blazor-context-menu blazor-context-menu__wrapper";
    /// <summary>
    /// The id that the <see cref="Components.ContextMenuTrigger"/> will use to bind to. This parameter is required
    /// </summary>
    [Parameter]
    public string Id { get; protected set; }

    [Parameter]
    public string Template { get; protected set; } = BlazorContextMenuSettings.DefaultTemplateName;

    /// <summary>
    /// Allows you to override the default css class of the menu's div element for full customization.
    /// </summary>
    [Parameter]
    public string OverrideDefaultCssClass { get; protected set; }

    /// <summary>
    /// Allows you to override the default css class of the menu's ul element for full customization.
    /// </summary>
    [Parameter]
    public string OverrideDefaultListCssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's div element. Use this to extend the default css
    /// </summary>
    [Parameter]
    public string CssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's ul element. Use this to extend the default css
    /// </summary>
    [Parameter]
    public string ListCssClass { get; protected set; }

    [Parameter]
    protected RenderFragment ChildContent { get; set; }


    protected bool IsShowing;
    protected string X { get; set; }
    protected string Y { get; set; }
    protected string TargetId { get; set; }
    protected string ClassCalc
    {
        get
        {
            return Helpers.AppendCssClasses((OverrideDefaultCssClass ?? settings.DefaultCssSettings.MenuCssClass),
                                            (CssClass ?? settings.GetTemplate(Template).MenuCssClass));
        }
    }


    protected string StyleDisplayCalc => !IsShowing ? "display: none;" : "";
    protected string ListClassCalc
    {
        get
        {
            return Helpers.AppendCssClasses((OverrideDefaultListCssClass ?? settings.DefaultCssSettings.MenuListCssClass),
                                            (ListCssClass ?? settings.GetTemplate(Template).MenuListCssClass));
        }
    }

    protected override void OnInit()
    {
        base.OnInit();
        if (string.IsNullOrEmpty(Id))
        {
            throw new ArgumentNullException(nameof(Id));
        }
        contextMenuHandler.Register((ContextMenu)(object)this);
    }

    public override void Dispose()
    {
        base.Dispose();
        contextMenuHandler.Unregister((ContextMenu)(object)this);
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public void Show(string x, string y, string targetId)
    {
        IsShowing = true;
        X = x;
        Y = y;
        TargetId = targetId;
        StateHasChanged();
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public void Hide()
    {
        IsShowing = false;
        StateHasChanged();
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public string GetTarget()
    {
        return TargetId;
    }
#pragma warning restore BL9993, CS4014 // Component parameter is marked public
}