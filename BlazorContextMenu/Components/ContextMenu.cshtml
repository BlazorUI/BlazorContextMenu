@using System.ComponentModel
@inherits MenuTreeComponent
@inject BlazorContextMenuSettings settings
@inject BlazorContextMenuHandler contextMenuHandler

<div class="@($"{BaseClass} {ClassCalc} {DisplayClassCalc}")" id="@Id" style="@($"left:{X}px;top:{Y}px;")">
    @if (IsShowing)
    {
        <ul class="@ListClassCalc">
            <CascadingValue Value="(MenuTreeComponent)this" Name="ParentComponent">
                <CascadingValue Value="@(Template != null ? Template : CascadingTemplate)" Name="CascadingTemplate">
                    <CascadingValue Value="@(Animation.HasValue ? Animation.Value : CascadingAnimation)" Name="CascadingAnimation">
                        @ChildContent
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </ul>
    }
</div>

@functions{

#pragma warning disable BL9993, CS4014 // Component parameter is marked public

    protected virtual string BaseClass => "blazor-context-menu blazor-context-menu__wrapper";

    /// <summary>
    /// The id that the <see cref="Components.ContextMenuTrigger" /> will use to bind to. This parameter is required
    ///
    /// </summary>
    [Parameter]
    public string Id { get; protected set; }

    /// <summary>
    /// The name of the template to use for this <see cref="BlazorContextMenu.Components.ContextMenu" /> and all its <see cref="BlazorContextMenu.Components.SubMenu" />.
    ///
    /// </summary>
    [Parameter]
    public string Template { get; protected set; }

    [CascadingParameter(Name = "CascadingTemplate")]
    protected string CascadingTemplate { get; set; }

    /// <summary>
    /// Allows you to override the default css class of the menu's div element for full customization.
    ///
    /// </summary>
    [Parameter]
    public string OverrideDefaultCssClass { get; protected set; }

    /// <summary>
    /// Allows you to override the default css class of the menu's div element (when shown) for full customization.
    ///
    /// </summary>
    [Parameter]
    public string OverrideDefaultShownCssClass { get; protected set; }

    /// <summary>
    /// Allows you to override the default css class of the menu's div element (when hidden) for full customization.
    ///
    /// </summary>
    [Parameter]
    public string OverrideDefaultHiddenCssClass { get; protected set; }

    /// <summary>
    /// Allows you to override the default css class of the menu's ul element for full customization.
    ///
    /// </summary>
    [Parameter]
    public string OverrideDefaultListCssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's div element. Use this to extend the default css
    ///
    /// </summary>
    [Parameter]
    public string CssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's div element when shown. Use this to extend the default css
    ///
    /// </summary>
    [Parameter]
    public string ShownCssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's div element when shown. Use this to extend the default css
    ///
    /// </summary>
    [Parameter]
    public string HiddenCssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's ul element. Use this to extend the default css
    ///
    /// </summary>
    [Parameter]
    public string ListCssClass { get; protected set; }

    /// <summary>
    /// Allows you to set the <see cref="BlazorContextMenu.Animation" /> used by this <see cref="BlazorContextMenu.Components.ContextMenu" /> and all its <see cref="BlazorContextMenu.Components.SubMenu" />
    ///
    /// </summary>
    [Parameter]
    public Animation? Animation { get; protected set; }

    [CascadingParameter(Name = "CascadingAnimation")]
    protected Animation? CascadingAnimation { get; set; }

    [Parameter]
    protected RenderFragment ChildContent { get; set; }


    protected bool IsShowing;
    protected string X { get; set; }
    protected string Y { get; set; }
    protected string TargetId { get; set; }
    protected string ClassCalc
    {
        get
        {
            return Helpers.AppendCssClasses((OverrideDefaultCssClass ?? settings.DefaultCssSettings.MenuCssClass),
                                            (CssClass ?? settings.GetTemplate(GetActiveTemplate()).MenuCssClass));
        }
    }

    protected Animation GetActiveAnimation()
    {
        var animation = CascadingAnimation;
        if (this.Animation != null)
        {
            animation = this.Animation;
        }
        if (animation == null)
        {
            animation = settings.GetTemplate(GetActiveTemplate()).Animation;
        }

        return animation.Value;
    }

    internal string GetActiveTemplate()
    {
        var templateName = CascadingTemplate;
        if (Template != null)
        {
            templateName = Template;
        }
        if (templateName == null)
        {
            templateName = BlazorContextMenuSettings.DefaultTemplateName;
        }

        return templateName;
    }

    protected string DisplayClassCalc
    {
        get
        {
            var (showingAnimationClass, hiddenAnimationClass) = GetAnimationClasses(GetActiveAnimation());
            return IsShowing ?
                Helpers.AppendCssClasses(OverrideDefaultShownCssClass ?? settings.DefaultCssSettings.MenuShownCssClass,
                                         showingAnimationClass,
                                         ShownCssClass ?? settings.GetTemplate(GetActiveTemplate()).MenuShownCssClass) :
                Helpers.AppendCssClasses(OverrideDefaultHiddenCssClass ?? settings.DefaultCssSettings.MenuHiddenCssClass,
                                         hiddenAnimationClass,
                                         HiddenCssClass ?? settings.GetTemplate(GetActiveTemplate()).MenuHiddenCssClass);
        }
    }
    protected string ListClassCalc
    {
        get
        {
            return Helpers.AppendCssClasses((OverrideDefaultListCssClass ?? settings.DefaultCssSettings.MenuListCssClass),
                                            (ListCssClass ?? settings.GetTemplate(GetActiveTemplate()).MenuListCssClass));
        }
    }

    protected (string showingClass, string hiddenClass) GetAnimationClasses(Animation animation)
    {
        switch (animation)
        {
            case BlazorContextMenu.Animation.None:
                return ("", "");
            case BlazorContextMenu.Animation.FadeIn:
                return ("blazor-context-menu__animations--fadeIn-shown", "blazor-context-menu__animations--fadeIn");
            case BlazorContextMenu.Animation.Grow:
                return ("blazor-context-menu__animations--grow-shown", "blazor-context-menu__animations--grow");
            case BlazorContextMenu.Animation.Slide:
                return ("blazor-context-menu__animations--slide-shown", "blazor-context-menu__animations--slide");
            default:
                throw new Exception("Animation not supported");
        }
    }

    protected override void OnInit()
    {
        base.OnInit();
        if (string.IsNullOrEmpty(Id))
        {
            throw new ArgumentNullException(nameof(Id));
        }
        contextMenuHandler.Register((ContextMenu)(object)this);
    }

    public override void Dispose()
    {
        base.Dispose();
        contextMenuHandler.Unregister((ContextMenu)(object)this);
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public void Show(string x, string y, string targetId)
    {
        IsShowing = true;
        X = x;
        Y = y;
        TargetId = targetId;
        Invoke(() => StateHasChanged());
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public void Hide()
    {
        IsShowing = false;
        Invoke(() => StateHasChanged());
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public string GetTarget()
    {
        return TargetId;
    }
#pragma warning restore BL9993, CS4014 // Component parameter is marked public
}