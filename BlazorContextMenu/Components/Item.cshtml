@using Microsoft.JSInterop
@inherits MenuTreeComponent
@inject BlazorContextMenuSettings settings
@inject MenuTreeTraverser menuTreeTraverser

<li id="@Id"
    onclick="@((e) => OnClickInternal(e))"
    class="@("blazor-context-menu__item " + ClassCalc)"
    style="@(Visible ? "display:block;" : "display:none;")"
    itemEnabled="@Enabled.ToString().ToLower()"
    onmouseover="@(Enabled ? $"blazorContextMenu.OnMenuItemMouseOver(event, {SubmenuXOffset ?? settings.GetTemplate(Template).SubMenuXPositionPixelsOffset}, this);" : "")"
    onmouseout="@(Enabled ? "blazorContextMenu.OnMenuItemMouseOut(event);" : "")"
    ref="@MenuItemElement">
    <CascadingValue Value="(MenuTreeComponent)this" Name="ParentComponent">
        @ChildContent
    </CascadingValue>
</li>


@functions{

#pragma warning disable BL9993, CS4014 // Component parameter is marked public

    /// <summary>
    /// Allows you to override the default css class of the menu's li element for full customization.
    /// </summary>
    [Parameter]
    public string OverrideDefaultCssClass { get; protected set; }

    /// <summary>
    /// Allows you to override the default "disabled" css class of the menu's li element for full customization.
    /// </summary>
    [Parameter]
    public string OverrideDefaultDisabledCssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's li element. Use this to extend the default css
    /// </summary>
    [Parameter]
    public string CssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's li element when disabled. Use this to extend the default css
    /// </summary>
    [Parameter]
    public string DisabledCssClass { get; protected set; }

    /// <summary>
    /// The menu item's onclick handler. A <see cref="MenuItemClickEventArgs"/> is passed to the action.
    /// If you want to cancel the click (i.e. stop the menu from closing), then set the "IsCanceled" event args property to "true".
    /// Note: For an async handler use <seealso cref="ClickAsync"/>
    /// </summary>
    [Parameter]
    public Action<MenuItemClickEventArgs> Click { get; protected set; }

    /// <summary>
    /// The menu item's onclick async handler. A <see cref="MenuItemClickEventArgs"/> is passed to the action.
    /// If you want to cancel the click (i.e. stop the menu from closing), then set the "IsCanceled" event args property to "true".
    /// Note: For a synchronous handler use <seealso cref="Click"/>
    /// </summary>
    [Parameter]
    public Func<MenuItemClickEventArgs, Task> ClickAsync { get; protected set; }

    /// <summary>
    /// Sets the item's enabled state. Default <see cref="true" />
    /// </summary>
    [Parameter]
    public bool Enabled { get; protected set; } = true;

    /// <summary>
    /// A handler that can be used to set the item's <see cref="Enabled"/> status dynamically
    /// Note: For an async handler use <seealso cref="EnabledHandlerAsync"/>
    /// </summary>
    [Parameter]
    public Func<MenuItemHandlerArgs, bool> EnabledHandler { get; protected set; }

    /// <summary>
    /// A handler that can be used to set the item's <see cref="Enabled"/> status dynamically
    /// Note: For a synchronous handler use <seealso cref="EnabledHandler"/>
    /// </summary>
    [Parameter]
    public Func<MenuItemHandlerArgs, Task<bool>> EnabledHandlerAsync { get; protected set; }

    /// <summary>
    /// Sets the item's visible state. Default <see cref="true" />
    /// </summary>
    [Parameter]
    public bool Visible { get; protected set; } = true;

    /// <summary>
    /// A handler that can be used to set the item's <see cref="Visible"/> status dynamically
    /// Note: For an async handler use <seealso cref="VisibleHandlerAsync"/>
    /// </summary>
    [Parameter]
    public Func<MenuItemHandlerArgs, bool> VisibleHandler { get; protected set; }

    /// <summary>
    /// A handler that can be used to set the item's <see cref="Visible"/> status dynamically
    /// Note: For a synchronous handler use <seealso cref="VisibleHandler"/>
    /// </summary>
    [Parameter]
    public Func<MenuItemHandlerArgs, Task<bool>> VisibleHandlerAsync { get; protected set; }

    /// <summary>
    /// The id of the li element. This is optional
    /// </summary>
    [Parameter]
    public string Id { get; protected set; }

    /// <summary>
    /// Allows you to override the default x position offset of the submenu (i.e. the distance of the submenu from it's parent menu).
    /// </summary>
    [Parameter]
    public int? SubmenuXOffset { get; protected set; }

    [Parameter]
    protected RenderFragment ChildContent { get; set; }

    protected string ClassCalc
    {
        get
        {
            string classes = null;
            if (Enabled)
            {
                classes = Helpers.AppendCssClasses((OverrideDefaultCssClass ?? settings.DefaultCssSettings.MenuItemCssClass),
                                            (CssClass ?? settings.GetTemplate(Template).MenuItemCssClass));
            }
            else
            {
                classes = Helpers.AppendCssClasses((OverrideDefaultDisabledCssClass ?? settings.DefaultCssSettings.MenuItemDisabledCssClass),
                                            (DisabledCssClass ?? settings.GetTemplate(Template).MenuItemDisabledCssClass));
            }

            return Helpers.AppendCssClasses(classes, (HasSubMenu ? "blazor-context-menu__item--with-submenu" : ""));
        }
    }

    protected ElementRef MenuItemElement { get; set; }
    protected string Template { get; set; } = BlazorContextMenuSettings.DefaultTemplateName;
    protected bool HasSubMenu { get; set; }

    protected override async Task OnInitAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            Id = Guid.NewGuid().ToString();
        }

        var menu = menuTreeTraverser.GetClosestContextMenuParent(this);
        if (menu == null) throw new Exception("Item component must be a child of a ContextMenu component");

        Template = menu.Template;

        var contextMenuTarget = menu.GetTarget();
        var args = new MenuItemHandlerArgs(menu.Id, contextMenuTarget, (Item)(object)this); //TODO: Remove casting when 'this' is fixed in blazor
        if (VisibleHandler != null)
        {
            Visible = VisibleHandler(args);
        }
        else if (VisibleHandlerAsync != null)
        {
            Visible = await VisibleHandlerAsync(args);
        }

        if (EnabledHandler != null)
        {
            Enabled = EnabledHandler(args);
        }
        else if (EnabledHandlerAsync != null)
        {
            Enabled = await EnabledHandlerAsync(args);
        }
    }

    protected override void OnAfterRender()
    {
        var menu = menuTreeTraverser.GetClosestContextMenuParent(this);
        if (menu == null) throw new Exception("Item must be a child of a ContextMenu component");

        //menuTreeTraverser.Debug_PrintChildInfo(this, 0);

        var hasSubMenu = menuTreeTraverser.HasSubMenu(this);
        if (HasSubMenu == hasSubMenu) return;

        //Hacky but works. TODO: Improve this code when this stuff is supported in Blazor
        Task.Run(() =>
        {
            Console.WriteLine("Has submenu task run");
            HasSubMenu = hasSubMenu;
            StateHasChanged();
        });
    }

    protected async Task OnClickInternal(UIMouseEventArgs e)
    {
        if (!Enabled) return;

        var menuId = await JSRuntime.Current.InvokeAsync<string>("blazorContextMenu.GetMenuId", MenuItemElement);
        var menu = BlazorContextMenuHandler.GetMenu(menuId);
        var contextMenuTarget = menu.GetTarget();
        var args = new MenuItemClickEventArgs(e, menu.Id, contextMenuTarget, MenuItemElement, (Item)(object)this);  //TODO: Remove casting when 'this' is fixed in blazor
        if (Click != null)
        {
            Click(args);
            if (!args.IsCanceled)
            {
                BlazorContextMenuHandler.HideMenu(menu.Id);
            }
        }
        else if (ClickAsync != null)
        {
            ClickAsync(args).ContinueWith((t) =>
            {
                if (!args.IsCanceled)
                {
                    BlazorContextMenuHandler.HideMenu(menu.Id);
                }
            });
        }
    }
#pragma warning restore BL9993, CS4014 // Component parameter is marked public
}