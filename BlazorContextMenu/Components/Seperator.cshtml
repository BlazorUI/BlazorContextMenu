@using Microsoft.JSInterop
@inject BlazorContextMenuSettings settings

<li id="@Id" class="@ClassCalc"  ref="@MenuItemElement">
    <hr class="@HrClassCalc" />
</li>

@functions{

#pragma warning disable BL9993, CS4014 // Component parameter is marked public

    /// <summary>
    /// Allows you to override the default css class of the menu's li seperator element for full customization.
    /// </summary>
    [Parameter]
    public string OverrideDefaultCssClass { get; protected set; }

    /// <summary>
    /// Allows you to override the default css class of the menu's seperator hr element for full customization.>
    /// </summary>
    [Parameter]
    public string OverrideDefaultHrCssClass { get; protected set; }

    /// <summary>
    /// The id of the li element. This is optional
    /// </summary>
    [Parameter]
    public string Id { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's li seperator element. Use this to extend the default css
    /// </summary>
    [Parameter]
    public string CssClass { get; protected set; }

    /// <summary>
    /// Additional css class for the menu's seperator hr element. Use this to extend the default css
    /// </summary>
    [Parameter]
    public string HrCssClass { get; protected set; }


#pragma warning restore BL9993 // Component parameter is marked public

    protected ElementRef MenuItemElement { get; set; }
    protected string Template { get; set; } = BlazorContextMenuSettings.DefaultTemplateName;

    protected string ClassCalc
    {
        get
        {
            return Helpers.AppendCssClasses(
                (OverrideDefaultCssClass ?? settings.DefaultCssSettings.SeperatorCssClass),
                (CssClass ?? settings.GetTemplate(Template).SeperatorCssClass));
        }
    }

    protected string HrClassCalc
    {
        get
        {
            return Helpers.AppendCssClasses(
               (OverrideDefaultHrCssClass ?? settings.DefaultCssSettings.SeperatorHrCssClass),
               (HrCssClass ?? settings.GetTemplate(Template).SeperatorHrCssClass));
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        var menuId = await JSRuntime.Current.InvokeAsync<string>("blazorContextMenu.GetMenuId", MenuItemElement);
        var menu = BlazorContextMenuHandler.GetMenu(menuId);
        if(Template == menu.Template) return;

        //Hacky but works. TODO: Improve this code when this stuff is supported in Blazor
        Task.Run(() =>
        {
            var oldTemplateValue = Template;
            Template = menu.Template;
            if (oldTemplateValue != Template)
            {
                StateHasChanged();
            }
        });
    }
}