@inject IJSRuntime jsRuntime

<h1>Todo List (Right click)</h1>
<ContextMenuTrigger MenuId="todoItemsMenu">
    <ul id="list1">
        @foreach (var item in TodoItems)
        {
            <li id="@($"list1-{TodoItems.IndexOf(item)}")"><input type="checkbox" bind="item.IsChecked" readonly /> @item.Text</li>
        }
    </ul>
</ContextMenuTrigger>

<h1>Todo List (Left click)</h1>
<ContextMenuTrigger MenuId="todoItemsMenu" MouseButtonTrigger="MouseButtonTrigger.Left">
    <ul id="list2">
        @foreach (var item in TodoItems)
        {
            <li id="@($"list2-{TodoItems.IndexOf(item)}")"><input type="checkbox" bind="item.IsChecked" readonly /> @item.Text</li>
        }
    </ul>
</ContextMenuTrigger>

<ContextMenu Id="todoItemsMenu">
    <Item id="menuitem-copy" OnClick="CopyClick"> <i class="fas fa-file blue-icon"></i> Copy</Item>
    <Item id="menuitem-check" OnClick="CheckClick" OnAppearing="CheckAppearingHandler"> <i class="fas fa-file blue-icon"></i> Check</Item>
    <Item id="menuitem-delete" OnClick="DeleteClick" OnAppearing="DeleteAppearingHandler"> <i class="fas fa-trash-alt red-icon"></i> Delete</Item>
    <Item id="menuitem-invisible" Visible="false">I am invisible</Item>
</ContextMenu>

@functions{

    async Task CopyClick(ItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations

        var itemIndex = await jsRuntime.InvokeAsync<int>("TestApp_GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            TodoItems.Add(new TodoItem
            {
                Text = currentTodoItem.Text + " Copy",
                IsChecked = currentTodoItem.IsChecked,
                CanBeDeleted = currentTodoItem.CanBeDeleted
            });
            StateHasChanged();
        }
    }

    async Task CheckAppearingHandler(ItemAppearingEventArgs e)
    {
        var itemIndex = await jsRuntime.InvokeAsync<int>("TestApp_GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            e.IsEnabled = !currentTodoItem.IsChecked;
        }
        else
        {
            e.IsEnabled = false;
        }
    }

    async Task DeleteAppearingHandler(ItemAppearingEventArgs e)
    {

        var itemIndex = await jsRuntime.InvokeAsync<int>("TestApp_GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            e.IsVisible = currentTodoItem.CanBeDeleted;
        }
        else
        {
            e.IsVisible = false;
        }
    }


    async Task CheckClick(ItemClickEventArgs e)
    {
        var itemIndex = await jsRuntime.InvokeAsync<int>("TestApp_GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            currentTodoItem.IsChecked = true;
            StateHasChanged();
        }
    }

    async Task DeleteClick(ItemClickEventArgs e)
    {
        var itemIndex = await jsRuntime.InvokeAsync<int>("TestApp_GetItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            TodoItems.Remove(currentTodoItem);
            StateHasChanged();
        }
    }

    List<TodoItem> TodoItems = new List<TodoItem>
{
        new TodoItem
        {
            Text = "Item 1",
            IsChecked = true
        },
        new TodoItem
        {
            Text="Item 2"
        },
        new TodoItem
        {
            Text="Item 3 (Cannot be deleted)",
            CanBeDeleted = false
        }
    };

    class TodoItem
    {
        public string Text { get; set; }
        public bool IsChecked { get; set; }
        public bool CanBeDeleted { get; set; } = true;
    }

}