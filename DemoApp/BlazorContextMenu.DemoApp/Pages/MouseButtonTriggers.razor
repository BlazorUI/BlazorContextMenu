@page "/mousebuttontriggers"
@inject IJSRuntime jsRuntime

<h1>Mouse Button Triggers</h1>

@*<p>You can set the trigger to left or either click</p>*@
@{

    RenderFragment demoFragment =
    @<div class="btn-group">
        <!-- Menu is in Shared/MainLayout-->
        <ContextMenuTrigger MenuId="triggerMenu" MouseButtonTrigger="MouseButtonTrigger.Left">
            <button class="btn btn-info">Click me!</button>
        </ContextMenuTrigger>

        <!-- Menu is in Shared/MainLayout-->
        <ContextMenuTrigger MenuId="triggerMenu" MouseButtonTrigger="MouseButtonTrigger.Both">
            <button class="btn btn-primary ml-10">Click or right-click me!</button>
        </ContextMenuTrigger>
    </div>;

    var tabItems = new List<TabItem>
    {
        new TabItem
        {
            HeaderText = "Demo",
            Contents = demoFragment
        },
        new TabItem
        {
            HeaderText = "<> Source",
            Contents = @<CodeBlock Title="Razor" Language="html">@code</CodeBlock>
        }
    };
}

<TabStrip Title="You can set the trigger to left or either click" TabItems="tabItems"/>

@functions{
    protected string code =
@"<div class=""btn-group"">
    <ContextMenuTrigger MenuId=""triggerMenu"" MouseButtonTrigger=""MouseButtonTrigger.Left"">
        <button class=""btn btn-info"">Click me!</button>
    </ContextMenuTrigger>

    <ContextMenuTrigger MenuId=""triggerMenu"" MouseButtonTrigger=""MouseButtonTrigger.Both"">
        <button class=""btn btn-primary ml-10"">Click or right-click me!</button>
    </ContextMenuTrigger>
</div>

<ContextMenu Id=""triggerMenu"" CssClass=""z-10"">
    <Item OnClick=""@OnClick"">Item 1</Item>
    <Item OnClick=""@OnClick"">Item 2</Item>
    <Item OnClick=""@OnClick"">Item 3</Item>
    <Item OnClick=""@OnClick"">Item 4</Item>
    <Item OnClick=""@OnClick"">Item 5</Item>
</ContextMenu>

@functions{
    void OnClick(ItemClickEventArgs e)
    {
        Console.WriteLine($""Item Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId},
                          IsCanceled: {e.IsCanceled}, MenuItem: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}"");
    }
}";

    protected override async Task OnAfterRenderAsync()
    {
        await jsRuntime.InvokeAsync<object>("DemoApp_RunPrism");
    }
}