@page "/dynamicitems"
@inject IJSRuntime jsRuntime

<h1>Dynamic Items</h1>
@{
    var tabItems = new List<TabItem>
    {
            new TabItem
            {
                HeaderText = "Demo",
                Contents = @<div>
                                <p>Right-click on the list items to view the context menu with dynamic items</p>
                                <ContextMenuTrigger MenuId="dynamicItemsMenu">
                                    <ul>
                                        @foreach (var item in TodoItems)
                                        {
                                            <li><input type="checkbox" bind="item.IsChecked"/> @item.Text</li>
                                        }
                                    </ul>
                                </ContextMenuTrigger>
                                <button type="button" onclick="@ResetList">Reset list</button>
                            </div>
        },
        new TabItem
        {
            HeaderText = "<> Source",
            Contents = @<div>
                            <CodeBlock Title="Razor" Language="html">@dynamicMenuCode</CodeBlock>
                            <CodeBlock Title="Javascript" Language="javascript">@jsCode</CodeBlock>
                        </div>
        }
    };
}

<TabStrip Title="You can have menu items be enabled/visible dynamically depending on the targeted element" TabItems="tabItems" />

<ContextMenu Id="dynamicItemsMenu">
    <Item Id="menuitem-check" OnClick="@ItemClick" OnAppearing="@OnAppearingHandler"> <i class="far fa-check-square blue-icon"></i> Check</Item>
    <Item Id="menuitem-uncheck" OnClick="@ItemClick" OnAppearing="@OnAppearingHandler"> <i class="far fa-square blue-icon"></i> Uncheck</Item>
    <Item Id="menuitem-delete" OnClick="@ItemClick" OnAppearing="@OnAppearingHandler"> <i class="fas fa-trash-alt red-icon"></i> Delete</Item>
</ContextMenu>


@functions{
    class TodoItem
    {
        public string Text { get; set; }
        public bool IsChecked { get; set; }
        public bool CanBeDeleted { get; set; } = true;
    }

    List<TodoItem> TodoItems = null;

    protected override void OnInit()
    {
        InitList();
    }

    private void ResetList()
    {
        InitList();
    }

    private void InitList()
    {
        TodoItems = new List<TodoItem>
        {
            new TodoItem
            {
                Text = "Item 1",
                IsChecked = true
            },
            new TodoItem
            {
                Text="Item 2"
            },
            new TodoItem
            {
                Text="Item 3 (Cannot be deleted)",
                CanBeDeleted = false,
                IsChecked = true
            },
            new TodoItem
            {
                Text="Item 4 (Cannot be deleted)",
                CanBeDeleted = false
            },
        };
    }

    async Task OnAppearingHandler(ItemAppearingEventArgs e)
    {
        var itemIndex = await jsRuntime.InvokeAsync<int>("DemoApp_GetListItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            switch (e.MenuItem.Id)
            {
                case "menuitem-delete":
                    e.IsEnabled = currentTodoItem.CanBeDeleted;
                    break;
                case "menuitem-check":
                    e.IsVisible = !currentTodoItem.IsChecked;
                    break;
                case "menuitem-uncheck":
                    e.IsVisible = currentTodoItem.IsChecked;
                    break;
            }
        }
    }

    async Task ItemClick(ItemClickEventArgs e)
    {
        var itemIndex = await jsRuntime.InvokeAsync<int>("DemoApp_GetListItemIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            switch (e.MenuItem.Id)
            {
                case "menuitem-delete":
                    TodoItems.Remove(currentTodoItem);
                    break;
                case "menuitem-check":
                    currentTodoItem.IsChecked = true;
                    break;
                case "menuitem-uncheck":
                    currentTodoItem.IsChecked = false;
                    break;
            }
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        await jsRuntime.InvokeAsync<object>("DemoApp_RunPrism");
    }

    private string dynamicMenuCode =
@"<p>Right-click on the list items to view the context menu with dynamic items</p>
<ContextMenuTrigger MenuId=""dynamicItemsMenu"">
    <ul>
        @foreach (var item in TodoItems)
        {
            <li><input type=""checkbox"" bind=""item.IsChecked""/> @item.Text</li>
        }
    </ul>
</ContextMenuTrigger>
<button type=""button"" onclick=""@ResetList"">Reset list</button>

<ContextMenu Id=""dynamicItemsMenu"">
    <Item Id=""menuitem-check"" OnClick=""@ItemClick"" OnAppearing=""@OnAppearingHandler""> <i class=""far fa-check-square blue-icon""></i> Check</Item>
    <Item Id=""menuitem-uncheck"" OnClick=""@ItemClick"" OnAppearing=""@OnAppearingHandler""> <i class=""far fa-square blue-icon""></i> Uncheck</Item>
    <Item Id=""menuitem-delete"" OnClick=""@ItemClick"" OnAppearing=""@OnAppearingHandler""> <i class=""fas fa-trash-alt red-icon""></i> Delete</Item>
</ContextMenu>

@functions{
    class TodoItem
    {
        public string Text { get; set; }
        public bool IsChecked { get; set; }
        public bool CanBeDeleted { get; set; } = true;
    }

    List<TodoItem> TodoItems = null;

    protected override void OnInit()
    {
        InitList();
    }

    private void ResetList()
    {
        InitList();
    }

    private void InitList()
    {
        TodoItems = new List<TodoItem>
        {
            new TodoItem
            {
                Text = ""Item 1"",
                IsChecked = true
            },
            new TodoItem
            {
                Text=""Item 2""
            },
            new TodoItem
            {
                Text=""Item 3 (Cannot be deleted)"",
                CanBeDeleted = false,
                IsChecked = true
            },
            new TodoItem
            {
                Text=""Item 4 (Cannot be deleted)"",
                CanBeDeleted = false
            },
        };
    }

    async Task OnAppearingHandler(ItemAppearingEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = await jsRuntime.InvokeAsync<int>(""DemoApp_GetListItemIndex"", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            switch (e.MenuItem.Id)
            {
                case ""menuitem-delete"":
                    e.IsEnabled = currentTodoItem.CanBeDeleted;
                    break;
                case ""menuitem-check"":
                    e.IsVisible = !currentTodoItem.IsChecked;
                    break;
                case ""menuitem-uncheck"":
                    e.IsVisible = currentTodoItem.IsChecked;
                    break;
            }
        }
    }

    async Task ItemClick(ItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = await jsRuntime.InvokeAsync<int>(""DemoApp_GetListItemIndex"", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentTodoItem = TodoItems.ElementAt(itemIndex);
            switch (e.MenuItem.Id)
            {
                case ""menuitem-delete"":
                    TodoItems.Remove(currentTodoItem);
                    break;
                case ""menuitem-check"":
                    currentTodoItem.IsChecked = true;
                    break;
                case ""menuitem-uncheck"":
                    currentTodoItem.IsChecked = false;
                    break;
            }
        }
    }
}";

    string jsCode =
@"DemoApp_GetListItemIndex = function (targetItemId) {
    var targetItem = document.getElementById(targetItemId);
    var li = targetItem.closest(""li"");
    var children = li.parentNode.childNodes;
    var num = 0;
    for (var i = 0; i < children.length; i++) {
        if (children[i] == li) return num;
        if (children[i].nodeType == 1) num++;
    }
    return -1;
};";
}
