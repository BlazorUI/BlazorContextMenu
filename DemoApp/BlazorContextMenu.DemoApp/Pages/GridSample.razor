@page "/gridsample"
@inject HttpClient Http
@inject IJSRuntime jsRuntime

<h1>Grid Sample</h1>
@{
    RenderFragment demoFragment = @<div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <ContextMenuTrigger WrapperTag="tr" MenuId="tableContextMenu">
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </ContextMenuTrigger>
                    }
                </tbody>
            </table>

        <ContextMenu Id="tableContextMenu">
            <Item OnClick="@ReloadClick"> <i class="fas fa-sync-alt blue-icon"></i> Reload</Item>
            <Item OnClick="@DeleteClick"> <i class="fas fa-trash-alt red-icon"></i> Delete</Item>
        </ContextMenu>
    </div>;

    var tabItems = new List<TabItem>()
    {
            new TabItem
            {
                HeaderText = "Demo",
                Contents = demoFragment
            },
            new TabItem
            {
                HeaderText = "<> Source",
                Contents = @<div>
                                <CodeBlock Title="Razor" Language="html">@menuCode</CodeBlock>
                                <CodeBlock Title="Javascript" Language="javascript">@jsCode</CodeBlock>
                            </div>
            }
    };
}
<TabStrip Title="Right-click on the rows to show the context menu." TabItems="tabItems"></TabStrip>

@functions {
    List<WeatherForecast> forecasts = new List<WeatherForecast>();
    string menuCode = @"@inject HttpClient Http
@inject IJSRuntime jsRuntime

<table class=""table"">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var forecast in forecasts)
    {
        <ContextMenuTrigger WrapperTag=""tr"" MenuId=""tableContextMenu"">
            <td>@forecast.Date.ToShortDateString()</td>
            <td>@forecast.TemperatureC</td>
            <td>@forecast.TemperatureF</td>
            <td>@forecast.Summary</td>
        </ContextMenuTrigger>
    }
    </tbody>
</table>

<ContextMenu Id=""tableContextMenu"">
    <Item OnClick=""@ReloadClick""> <i class=""fas fa-sync-alt blue-icon""></i> Reload</Item>
    <Item OnClick=""@DeleteClick""> <i class=""fas fa-trash-alt red-icon""></i> Delete</Item>
</ContextMenu>

@functions{
    async Task ReloadClick(ItemClickEventArgs e)
    {
        forecasts = (await Http.GetJsonAsync<WeatherForecast[]>(""sample-data/weather.json"")).ToList();
    }

    async Task DeleteClick(ItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = await jsRuntime.InvokeAsync<int>(""DemoApp_GetRowIndex"", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentItem = forecasts.ElementAt(itemIndex);
            forecasts.Remove(currentItem);
        }
    }
}";
    string jsCode = 
@"DemoApp_GetRowIndex = function (targetItemId) {
    var targetItem = document.getElementById(targetItemId);
    var tr = targetItem.closest(""tr"");
    if (tr.parentNode.tagName == ""THEAD"")
    {
        return -1;
    }
    var children = tr.parentNode.childNodes;
    var num = 0;
    for (var i = 0; i < children.length; i++)
    {
        if (children[i] == tr) return num;
        if (children[i].nodeType == 1) num++;
    }
    return -1;
};";

    protected override async Task OnInitAsync()
    {
        forecasts = (await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json")).ToList();
    }

    class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF { get; set; }
        public string Summary { get; set; }
    }

    async Task ReloadClick(ItemClickEventArgs e)
    {
        forecasts = (await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json")).ToList();
    }

    async Task DeleteClick(ItemClickEventArgs e)
    {
        //Interop is required here due to current blazor limitations
        var itemIndex = await jsRuntime.InvokeAsync<int>("DemoApp_GetRowIndex", e.ContextMenuTargetId);
        if (itemIndex >= 0)
        {
            var currentItem = forecasts.ElementAt(itemIndex);
            forecasts.Remove(currentItem);
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        await jsRuntime.InvokeAsync<object>("DemoApp_RunPrism");
    }
}
