@page "/templating"
<h1>Templating</h1>
<div class="card ">
    <div class="card-header">
        Dark Template sample
        <ul class="nav nav-tabs card-header-tabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" data-target="#dark-demo" data-toggle="tab" role="tab" aria-controls="home" aria-selected="true">Demo</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-target="#dark-csharp" data-toggle="tab" role="tab" aria-controls="profile" aria-selected="false">C#</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-target="#dark-css" data-toggle="tab" role="tab" aria-controls="contact" aria-selected="false">css</a>
            </li>
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content">
            <div class="tab-pane fade show active" id="dark-demo" role="tabpanel" aria-labelledby="home-tab">
                <ContextMenuTrigger MenuId="dark-menu">
                    <p>Right click here to view the menu</p>
                </ContextMenuTrigger>
            </div>
            <div class="tab-pane fade" id="dark-csharp" role="tabpanel" aria-labelledby="profile-tab">
                <CodeBlock Language="csharp">services.AddBlazorContextMenu(options=>
{
    options.ConfigureTemplate("dark", template =>
    {
        template.MenuCssClass = "dark-menu";
        template.MenuItemCssClass = "dark-menu-item";
        template.MenuItemDisabledCssClass = "dark-menu-item--disabled";
        template.SeperatorHrCssClass = "dark-menu-seperator-hr";
        template.MenuItemWithSubMenuCssClass = "dark-menu-item--with-submenu";
        template.Animation = Animation.FadeIn;
    });
});</CodeBlock>
            </div>
            <div class="tab-pane fade" id="dark-css" role="tabpanel" aria-labelledby="contact-tab">... t3</div>
        </div>
    </div>
</div>

<!-- located in Shared/ThemedMenuSample -->
<ThemedMenuSample Id="dark-menu" Template="dark" />


@functions{ 

    protected override async Task OnAfterRenderAsync()
    {
        await Microsoft.JSInterop.JSRuntime.Current.InvokeAsync<object>("DemoApp_RunPrism");
    }
}