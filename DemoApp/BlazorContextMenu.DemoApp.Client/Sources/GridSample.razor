@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
        {
            <ContextMenuTrigger WrapperTag="tr" MenuId="tableContextMenu" Data="forecast">
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </ContextMenuTrigger>
        }
     </tbody>
</table>

<ContextMenu Id="tableContextMenu">
    <Item OnClick="@ReloadClick"> <i class="fas fa-sync-alt blue-icon"></i> Reload</Item>
    <Item OnClick="@DeleteClick"> <i class="fas fa-trash-alt red-icon"></i> Delete</Item>
</ContextMenu>

@functions{
    List<WeatherForecast> forecasts = new List<WeatherForecast>();
    protected override async Task OnInitializedAsync()
    {
        forecasts = (await httpClient.GetJsonAsync<WeatherForecast[]>("api/SampleData/WeatherForecasts")).ToList();
    }

    async Task ReloadClick(ItemClickEventArgs e)
    {
        forecasts = (await httpClient.GetJsonAsync<WeatherForecast[]>("api/SampleData/WeatherForecasts")).ToList();
    }

    void DeleteClick(ItemClickEventArgs e)
    {
        var currentForecast = e.Data as WeatherForecast;
        forecasts.Remove(currentForecast);
    }
}
